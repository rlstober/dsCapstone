{
    "contents" : "#runtimeFunctions\n# rm(list=ls()); gc()\n\nlibrary(stringi)\nlibrary(stringr)\nlibrary(data.table)\nlibrary(sqldf)\n# library(wordcloud)\n# require(tcltk)\n# load(\"./predictTDMdt.RData\", .GlobalEnv)\n\ncleanText<-function(myText){\n  resultText <- stri_trans_tolower(myText)\n  ## non-utf-8 characters\n  # drop non UTF-8 characters \n  resultText <- iconv(resultText, from = \"latin1\", to = \"UTF-8\", sub=\"\") \n  #replace unicode single quote\n  resultText <- stri_replace_all_regex(resultText, \"\\u2019|`\",\"'\") \n  #replace unicode quotes\n  resultText <- stri_replace_all_regex(resultText, \"\\u201c|\\u201d|u201f|``\",'\"') \n  #add start tag\n  resultText <- stri_replace_all_regex(resultText, \"^\",'<start> ')\n  # remove profanity\n  resultText <- stri_replace_all_regex(resultText, \"fuck \",'')\n  resultText <- stri_replace_all_regex(resultText, \"cunt \",'')\n  resultText <- stri_replace_all_regex(resultText, \"shit \",'')\n  # trim function got from stack overflow\n  #http://stackoverflow.com/questions/14737266/removing-multiple-spaces-and-trailing-spaces-using-gsub\n  trim <- function(x) return(gsub(\"^ *|(?<= ) | *$\", \"\", x, perl=T))\n  resultText<-trim(resultText)\n  return(resultText)\n}\n\ndtInput<-function(cleanPhrase){\n  # clean it like initial data load\n  dtIn<-as.data.table(unlist(cleanPhrase))\n  #dtIn<-as.data.table(unlist(str_split(cleanPhrase,\" \")))\n  setnames(dtIn, \"V1\", \"Phrase\")\n  #if nothing input then start \n  if (is.null(dtIn$Phrase)) dtIn$Phrase<-\"<start>\"\n  if (dtIn$Phrase ==\"\") dtIn$Phrase<-\"<start>\"\n  #split input\n  splitPhrase<-unlist(str_split(dtIn$Phrase,\" \"))\n  #how many words were input\n  phraseCount<-length(splitPhrase)\n  # populate columns with words \n  dtIn$t<-splitPhrase[phraseCount -2]\n  dtIn$u<-splitPhrase[phraseCount -1]\n  dtIn$v<-splitPhrase[phraseCount]\n  dtIn$Bigram<-paste(dtIn$u,dtIn$v)\n  dtIn$Trigram<-paste(dtIn$t, dtIn$u,dtIn$v)\n  return(dtIn)\n}\n\n#\npredictOutput<-function(dtIn){\n  #unigrams has many with same probability, randomize so will be different\n  uniResult<-fn$sqldf(\"select distinct w, ContinuationProbability from predictTDMdt order by ContinuationProbability Desc limit 100\")\n  uniResult$r100<-sample(1:100, 100, replace=FALSE)\n  uniResultTable<-sqldf(\"select w, ContinuationProbability from uniResult  order by r100 limit 20\")\n  \n  predictResultTable<-sqldf(\"select w, 3+ TrigramProbability as Probability from predictTDMdt join dtIn using (Trigram) \n        UNION select w, 2+ BigramProbability  as Probability from predictTDMdt join dtIn using (Bigram) \n        UNION select w, 1+ContinuationProbability  as Probability from uniResultTable  \n                          order by Probability desc\")\n  #words may not be distinct\n  predictResultTableSum<-sqldf(\"select w, max(Probability) as Probability from predictResultTable group by w\")\n  #get top 5\n  #predictResult<-sqldf(\"select w, Probability from predictResultTableSum order by Probability DESC limit 5\")\n  \n  return(predictResultTableSum)\n}\n\n",
    "created" : 1429993793321.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2507005978",
    "id" : "1D27A544",
    "lastKnownWriteTime" : 1430063652,
    "path" : "~/GitHub/dsCapstone/shiny/runtimeFunctions.R",
    "project_path" : "shiny/runtimeFunctions.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}