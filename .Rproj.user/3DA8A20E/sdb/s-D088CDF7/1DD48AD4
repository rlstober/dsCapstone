{
    "contents" : "#buildDataTables\n# rm(list=ls()); gc()\nlibrary(data.table)\nlibrary(tidyr)\nlibrary(sqldf)\nlibrary(caTools)\n\n\nbuildDt<-function(tdm){\n  k<-.5\n  dt<-as.data.table(tdm,keep.rownames = TRUE)\n  # clean up names\n  setnames(dt,colnames(dt),make.names(colnames(dt)))\n  #set colnames\n  newnames<-c(\"Phrase\",\"Count\")\n  oldnames<-colnames(dt)\n  setnames(dt,oldnames,newnames)\n  return(dt)\n}\n\n## 1-grams: don't load, use KN smoothing of bigrams instead\n\n## 2-grams\n\n#load data\nload(\"./data/biTDMsparseFreq.RData\")\n# data table\nbiTDMdt<-buildDt(biTDMsparseFreq)\n# redundant used for joins\nbiTDMdt$Bigram<-biTDMdt$Phrase\n#split\nbiTDMdt<-separate(biTDMdt, Phrase, into=c(\"v\",\"w\"), sep = \" \", remove = FALSE, convert = FALSE)\n\n# get probability\ncountV<-sqldf(\"select v, sum(Count) as Count from biTDMdt group by v\")\n#and add to table\nbiTDMdt$UnigramCount<-sqldf(\"select countV.Count from biTDMdt join countV using (v)\")\n# calculate bigram probability \nbiTDMdt$BigramProbability<-biTDMdt$Count/biTDMdt$UnigramCount\n\n# Unigram Kneser-ney probabailities\ncountW<-sqldf(\"select w, count as ContinuationCount from biTDMdt group by v\")\ncountW$ContinuationProb<-countW$ContinuationCount/nrow(countW)\nbiTDMdt$ContinuationProb<-sqldf(\"select countW.ContinuationProb from biTDMdt join countW using (w)\")\nstr(biTDMdt)\nhead(biTDMdt)\n\n# 3-grams\n#load\nload(\"./data/triTDMsparseFreq.RData\")\n# build data table\ntriTDMdt<-buildDt(triTDMsparseFreq)\n# redundant used for joins\ntriTDMdt$TRigram<-triTDMdt$Phrase\n#separate words in phrase\ntriTDMdt<-separate(triTDMdt, Phrase, into=c(\"u\",\"v\",\"w\"), sep = \" \", remove = FALSE, convert = FALSE)\n# leading Bigram\ntriTDMdt$Bigram<-paste(triTDMdt$u,triTDMdt$v)\n\n# calculate probability\n# get counts of leading bigrams\ncountUV<-sqldf(\"select u,v, sum(Count) as Count from triTDMdt group by u,v\")\ncountUV$Bigram<-paste(countUV$u,countUV$v)\n# and add to table\ntriTDMdt$BigramCount<-sqldf(\"select countUV.Count from triTDMdt join countUV using (Bigram)\")\n# calculate trigram probability \ntriTDMdt$TrigramProbability<-triTDMdt$Count/triTDMdt$BigramCount\nstr(triTDMdt)\nhead(triTDMdt)\n\n\n## 4-grams\n\n#load data\nload(\"./data/quadTDMsparseFreq.RData\")\nquadTDMdt<-buildDt(quadTDMsparseFreq)\n\n#separate words in phrase\nquadTDMdt<-separate(quadTDMdt, Phrase, into=c(\"t\",\"u\",\"v\",\"w\"), sep = \" \", remove = FALSE, convert = FALSE)\n# leading Trigram\nquadTDMdt$Trigram<-paste(quadTDMdt$t, quadTDMdt$u, quadTDMdt$v)\n# leading Bigram\nquadTDMdt$Bigram<-paste(quadTDMdt$u,quadTDMdt$v)\n\n\n# calculate probability\n\n# get counts of leading trigrams\ncountTUV<-sqldf(\"select t,u,v, sum(Count) as Count from quadTDMdt group by t,u,v\")\n#add trigram column\ncountTUV$Trigram<-paste(countTUV$t, countTUV$u, countTUV$v)\n\n# and add to table\nquadTDMdt$TrigramCount<-sqldf(\"select countTUV.Count from quadTDMdt join countTUV using (trigram)\")\n\n# calculate trigram probability \nquadTDMdt$QuadgramProbability<-quadTDMdt$Count/quadTDMdt$TrigramCount\n\nstr(quadTDMdt)\nhead(quadTDMdt)\n\n##Join to one dataset\n\n#start with 4-grams\npredictTDMdt<-quadTDMdt\n# add trigram probabilities\npredictTDMdt$TrigramProbability<-sqldf(\"select TrigramProbability from predictTDMdt join triTDMdt  using (Trigram)\")\npredictTDMdt$BigramProbability<-sqldf(\"select BigramProbability from predictTDMdt join biTDMdt  using (Bigram)\")\npredictTDMdt$ContinuationProbability<-sqldf(\"select countW.ContinuationProb from predictTDMdt join countW using (w)\")\nstr(predictTDMdt)\n\n\n## divide and save\n\n#save complete data table\nsave(predictTDMdt, file=\"./data/predictTDMdt.RData\")\n\n#split into train test and validation\nset.seed<-12345\n\n# get training and save\nsplit<-sample.split(predictTDMdt, SplitRatio = 2/3)\npredictTDMdtTrain<-subset(predictTDMdt, split==TRUE)\nsave(predictTDMdtTrain, file=\"./data/predictTDMdtTrain.RData\")\n\n#get the rest\npredictTDMdtRest<-subset(predictTDMdt, split==FALSE)\n#split into train and test and validation\nsplit<-sample.split(predictTDMdtRest, SplitRatio = 1/2)\n#get and save test\npredictTDMdtTest<-subset(predictTDMdtRest, split==TRUE)\nsave(predictTDMdtTest, file=\"./data/predictTDMdtTest.RData\")\n#get and save val\npredictTDMdtVal<-subset(predictTDMdtRest, split==FALSE)\nsave(predictTDMdtVal, file=\"./data/predictTDMdtVal.RData\")\n\n",
    "created" : 1429898587660.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1783995220",
    "id" : "1DD48AD4",
    "lastKnownWriteTime" : 1429897585,
    "path" : "~/GitHub/dsCapstone/buildDataTables.R",
    "project_path" : "buildDataTables.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "source_on_save" : false,
    "type" : "r_source"
}