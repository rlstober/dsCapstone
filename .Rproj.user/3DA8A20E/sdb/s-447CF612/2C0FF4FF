{
    "contents" : "#shinyFragments\n\n\n\n\n#   output$resetable_input <- renderUI({\n#     times <- input$reset_input\n#     list(\n#       h4('The application will attempt to predict the next word to be typed'),\n#       br(),\n#       \n#       radioButtons(\"nw\", label = h4(\"Set the Number of Single Word Predictions\"),\n#                    choices = list(\"One\" = 1, \"Three\" = 3,\n#                                   \"Five\" = 5),selected = 3),  \n#       textInput('tin',\n#                 label=h4('Enter an incomplete phrase below'),\n#                 value = \"This application is\"),\n#       h4('Hit the Predict button to update the prediction or Reset to start over')\n#     ) # end list\n#   })\n#   \n\n\n# wordcloud_rep <- repeatable(wordcloud)\n# output$Cloud<-renderPlot({\n#   defaultR<-runif(length(default))\n#   wordcloud_rep(default,defaultR, max.words = length(default), scale=c(3.5,0.2), colors=brewer.pal(4,\"Dark2\"))\n# })  \n# \n# output$Cloud<-renderPlot({\n#   wordcloud_rep(predictResultTableSum$w,predictResultTableSum$Probability,max.words = 20, scale=c(3.5,0.2), colors=brewer.pal(4,\"Dark2\"))\n# })  \n\n\n\n\n# Send a pre-rendered image, and don't delete the image after sending it\n#   output$cloud <- renderImage({\n#     # When input$n is 1, filename is ./images/image1.jpeg\n#     # add 1 to image number each time range 0 -3\n#     if (nc==3) nc<<-0 else nc<<- nc+1\n#     #if start use image 0\n#     if (deftin == input$tin) nc<<-0\n#     filename <- normalizePath(file.path('./www',\n#                               paste('cloud', nc, '.png', sep='')))\n# \n#     # Return a list containing the filename\n#     list(src = filename)\n#   }, deleteFile = FALSE)\n\n\n# wordcloud_rep <- repeatable(wordcloud)\n# output$Cloud<-reactive({\n#   if (cleanPhrase==cleanText(deftin) ) { \n#   defaultR<-runif(length(default))\n#   renderPlot<-wordcloud_rep(default,defaultR, max.words = length(default), scale=c(3.5,0.2), colors=brewer.pal(4,\"Dark2\"))\n#   } else renderPlot<-wordcloud_rep(predictResultTableSum$w,predictResultTableSum$Probability,max.words = 20, scale=c(3.5,0.2), colors=brewer.pal(4,\"Dark2\"))\n#   } )\n#   \n\n\n# wordcloud_rep <- repeatable(wordcloud)\n# output$Cloud<-renderPlot({\n#     defaultR<-runif(length(default))\n#     wordcloud_rep(default,defaultR, max.words = length(default), scale=c(3.5,0.2), colors=brewer.pal(4,\"Dark2\"))\n# \n# })\n\n\n# output$nw<-renderText({\n#   if (is.null(input$nw) ==TRUE) defnw else input$nw\n# }) \n# output$tin<-renderText({\n#   #if (length(input$tin) && sub(\" \",\"\",input$tin) == \"\" ) deftin else input$tin \n#   if (is.null(input$tin) ==TRUE) deftin else input$tin \n# }) \n# output$nw<-renderText({\n#   if (is.null(input$nw) ==TRUE) defnw else input$nw\n# }) \n# \n# \n# output$cleanPhrase<-renderText({\n#  if (is.null(input$tin) ==TRUE) cleanText(deftin) else cleanText(input$tin)\n#  })\n\n\n\n#actionButton(\"predictButton\", label = \"Predict\", icon = icon(\"question\",  lib = \"font-awesome\")),\n#actionButton(\"reset_input\", label = \"Reset\", icon = icon(\"refresh\",  lib = \"font-awesome\")),\n\n\n\noutput$predict <- renderTable({\n  if(is.null(input$nw)==TRUE) sz<-defnw else sz<-input$nw\n  #run default\n  if (input$default == \"Reset\") {\n    defUI1<-defUI\n    g1<-as.matrix(sample(default,sz),dimnames = list(NULL,\"Words\"))\n    return(g1)\n  }\n  #     # run predict\n  \n  if (input$default == \"Predict\") { \n    cleanPhrase<-cleanText(input$tin)\n    dtIn<-dtInput(cleanPhrase)\n    predictOut<-predictOutput(dtIn)\n    g1<-as.matrix(predictOut[1:sz,1],dimnames = list(NULL,\"Words\"))\n  }\n})\n\n\n#         h4('The number of words to predict is'),\n#         verbatimTextOutput(\"nw\"),\n# \n#         h4('Your incomplete phrase is'),\n#         verbatimTextOutput(\"tin\"),\nbr(),\nh4('The cleaned phrase is '),\nverbatimTextOutput(\"cleanPhrase\") ,",
    "created" : 1430091693215.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3345890096",
    "id" : "2C0FF4FF",
    "lastKnownWriteTime" : 1430094602,
    "path" : "~/GitHub/dsCapstone/shinyFragments.R",
    "project_path" : "shinyFragments.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "source_on_save" : false,
    "type" : "r_source"
}